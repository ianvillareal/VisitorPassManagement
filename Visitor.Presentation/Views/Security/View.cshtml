@model VisitorViewModel
@using Visitor.Presentation.Helpers;
@using Visitor.Core;
@{
    ViewBag.Title = "Visitor Pass Details";
}

<div class="row workspace">
    <div class="top-section">
        <div class="page-title action-title">
            Create: <span class="visitor-name">Visitor Pass Details</span>
        </div>
    </div>

    <div class="action-section remove-margin-top-30px">
        <div class="form-section">
            @using (Html.BeginForm("CompleteOrPending", "Security", FormMethod.Post, new { @class = "securityApproval-form with-validation" }))
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    <hr />
                    @Html.ValidationSummary(true)
                    <!-- Start of Visitor Form -->
                    <div>
                        @Html.HiddenFor(model => model.VisitorId, new { htmlAttributes = new { @id = "selectedvisitorId-field" } })
                        @Html.HiddenFor(model => model.Requestor)
                        @Html.HiddenFor(model => model.RequestorId)
                        @Html.HiddenFor(model => model.Requested)
                        @Html.HiddenFor(model => model.Purpose)
                        @Html.HiddenFor(model => model.Status)
                        @Html.HiddenFor(model => model.Arrival)
                        @Html.HiddenFor(model => model.Leave)
                        @Html.HiddenFor(model => model.Company)
                        @if (Model.VisitorList != null)
                        {
                            for (int i = 0; i < Model.VisitorList.Length; i++)
                            {
                                @Html.HiddenFor(x => x.VisitorList[i])
                            }
                        }
                    </div>
                    <div class="idle-viewpanel-form">
                        <div class="panel panel-primary panel-margin-bottom-10px" id="activity-logging-view">
                            <div class="panel-heading">Visitor Pass Information</div>
                            <div class="panel-body">
                                <div class="row">
                                    @Html.LabelFor(model => model.Requestor, new { @class = "control-form-label col-md-3 col-lg-2 idle-input-label" })
                                    <div class="col-md-8 col-lg-9 idle-static-text">
                                        <span>@Html.DisplayTextFor(model => model.Requestor)</span>
                                    </div>
                                </div>
                                <div class="row">
                                    @Html.LabelFor(model => model.Requested, new { @class = "control-form-label col-md-3 col-lg-2 idle-input-label" })
                                    <div class="col-md-8 col-lg-9 idle-static-text">
                                        <span>@Model.Requested.ToString("MMM-dd-yyyy HH:mm:ss")</span>
                                    </div>
                                </div>
                                <div class="row">
                                    @Html.LabelFor(model => model.Purpose, new { @class = "control-form-label col-md-3 col-lg-2 idle-input-label" })
                                    <div class="col-md-8 col-lg-9 idle-static-text">
                                        <span>@Model.Purpose.DisplayName().ToString()</span>
                                    </div>
                                </div>
                                <div class="row">
                                    @Html.LabelFor(model => model.Status, new { @class = "control-form-label col-md-3 col-lg-2 idle-input-label" })
                                    <div class="col-md-8 col-lg-9 idle-static-text">
                                        <span>@Model.Status.DisplayName().ToString()</span>
                                    </div>
                                </div>
                                <div class="row">
                                    @Html.LabelFor(model => model.Arrival, new { @class = "control-form-label col-md-3 col-lg-2 idle-input-label" })
                                    <div class="col-md-8 col-lg-9 idle-static-text">
                                        <span>@Model.Arrival.ToString("MMM-dd-yyyy HH:mm:ss")</span>
                                    </div>
                                </div>
                                <div class="row">
                                    @Html.LabelFor(model => model.Leave, new { @class = "control-form-label col-md-3 col-lg-2 idle-input-label" })
                                    <div class="col-md-8 col-lg-9 idle-static-text">
                                        <span>@Model.Leave.ToString("MMM-dd-yyyy HH:mm:ss")</span>
                                    </div>
                                </div>
                                <div class="row">
                                    @Html.LabelFor(model => model.Company, new { @class = "control-form-label col-md-3 col-lg-2 idle-input-label" })
                                    <div class="col-md-8 col-lg-9 idle-static-text">
                                        <span>@Model.Company</span>
                                    </div>
                                </div>
                                <!-- Visitors -->
                                <div class="form-group row reduce-top-margin">
                                    @Html.LabelFor(model => model.VisitorList, new { @class = "control-label col-md-3 col-lg-2 idle-input-label" })
                                    <div class="col-md-8 col-lg-8 idle-input-field">
                                        <div class="panel panel-default reduce-panel-bottom">
                                            <div class="panel-heading">
                                                <h3 class="panel-title">Visitors</h3>
                                                <span class="pull-right clickable"><i class="glyphicon glyphicon-chevron-up collapsible"></i></span>
                                            </div>
                                            <div class="panel-body add-side-padding">
                                                <div class="form-group row">
                                                    <table id="visitor-request-table" class="table table-striped table-bordered hover stripe row-border multi-header-table" cellspacing="0">
                                                        <thead>
                                                            <tr>
                                                                <th>Name</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @foreach (var visitor in Model.VisitorList)
                                                            {
                                                                <tr>
                                                                    <td>
                                                                        @visitor
                                                                    </td>
                                                                </tr>
                                                            }
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                @if (Model.Purpose == Visitor.Core.PurposeType.Construction)
                                {
                                    <!-- Requirement -->
                                    <div class="form-group row reduce-top-margin">
                                        @Html.LabelFor(model => model.Requirement, new { @class = "control-label col-md-3 col-lg-2 idle-input-label" })
                                        <div class="col-md-8 col-lg-8 idle-input-field">
                                            <div class="panel panel-default reduce-panel-bottom">
                                                <div class="panel-heading">
                                                    <h3 class="panel-title">Requirement</h3>
                                                    <span class="pull-right clickable"><i class="glyphicon glyphicon-chevron-up"></i></span>
                                                </div>
                                                <div class="panel-body add-side-padding">
                                                    <div class="form-group row">
                                                        @Html.LabelFor(model => model.Requirement.Plan, new { @class = "control-form-label col-md-3 col-lg-2 idle-input-label" })
                                                        <div class="col-md-8 col-lg-9 idle-static-text">
                                                            <span>@Html.DisplayTextFor(model => model.Requirement.Plan)</span>
                                                        </div>
                                                    </div>
                                                    <div class="form-group row">
                                                        @Html.LabelFor(model => model.Requirement.Contractor, new { @class = "control-form-label col-md-3 col-lg-2 idle-input-label" })
                                                        <div class="col-md-8 col-lg-9 idle-static-text">
                                                            <span>@Html.DisplayTextFor(model => model.Requirement.Contractor)</span>
                                                        </div>
                                                    </div>
                                                    <div class="form-group row">
                                                        @Html.LabelFor(model => model.Requirement.CashBond, new { @class = "control-form-label col-md-3 col-lg-2 idle-input-label" })
                                                        <div class="col-md-8 col-lg-9 idle-static-text">
                                                            <span>@Html.DisplayTextFor(model => model.Requirement.CashBond)</span>
                                                        </div>
                                                    </div>
                                                    <div class="form-group row">
                                                        @Html.LabelFor(model => model.Requirement.WorkerOrientation, new { @class = "control-form-label col-md-3 col-lg-2 idle-input-label" })
                                                        <div class="col-md-8 col-lg-9 idle-static-text">
                                                            <span>@Html.DisplayTextFor(model => model.Requirement.WorkerOrientation)</span>
                                                        </div>
                                                    </div>
                                                    <div class="form-group row">
                                                        <table id="visitor-worker-table" class="table table-striped table-bordered hover stripe row-border multi-header-table Workers" cellspacing="0">
                                                            <thead>
                                                                <tr>
                                                                    <th>Worker</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody class="worker-body">
                                                                @foreach (var worker in Model.Requirement.WorkerList)
                                                                {
                                                                    <tr>
                                                                        <td>
                                                                            @worker
                                                                        </td>
                                                                    </tr>
                                                                }
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                if (Model.Status != StatusType.Completed && Model.Status != StatusType.Declined)
                {
                    <div class="form-group row action-button-group">
                        <div class="col-md-9 col-lg-10"></div>
                        <div class="col-md-3 col-lg-2 action-button text-center">
                            @if (Model.Status == StatusType.ForCompletion)
                            {
                                <input id="securityApproval-completed-btn" type="submit" value="Completed" class="btn btn-primary" />
                            }
                            else if (Model.Status != StatusType.Approved)
                            {
                                <input id="securityApproval-forcompletion-btn" type="submit" value="Complete" class="btn btn-disabled-background disabled" />
                                <input id="securityApproval-pending-btn" type="submit" value="Pending" class="btn btn-disabled-background disabled" />
                            }
                            else
                            {
                                <input id="securityApproval-forcompletion-btn" type="submit" value="Complete" class="btn btn-primary" />
                                <input id="securityApproval-pending-btn" type="submit" value="Pending" class="btn btn-danger" />
                            }
                            <input id="visitor-back-button" type="button" value="Back" class="btn btn-warning html-backbutton-action" title="Back to previous page" />
                        </div>
                    </div>
                }
                else
                {
                    <div class="form-group row action-button-group">
                        <div class="col-md-9 col-lg-10"></div>
                        <div class="col-md-3 col-lg-2 action-button text-center">
                            <input id="visitor-back-button" type="button" value="Back" class="btn btn-warning html-backbutton-action" title="Back to previous page" />
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>
@Scripts.Render("~/bundles/visitor-js")